// <auto-generated />
using System;
using HackathonBot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HackathonBot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250929133552_IdkWhatsChanged")]
    partial class IdkWhatsChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("HackathonBot.Models.BotUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<long?>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TelegramId")
                        .HasDatabaseName("IX_BotUserRole_TelegramId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_BotUserRole_Username");

                    b.ToTable("BotUserRole");
                });

            modelBuilder.Entity("HackathonBot.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("FsmUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FsmUserId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TelegramId")
                        .HasDatabaseName("IX_Participant_TelegramId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("HackathonBot.Models.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Case")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PresentationFileUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PresentationLink")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubmittedById")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("HackathonBot.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Case")
                        .HasColumnType("INTEGER");

                    b.Property<long>("KmmId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Team");
                });

            modelBuilder.Entity("MyBots.Core.Persistence.DTO.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HackathonBot.Models.BotUserRole", b =>
                {
                    b.HasOne("MyBots.Core.Persistence.DTO.User", "User")
                        .WithMany()
                        .HasForeignKey("TelegramId")
                        .HasPrincipalKey("TelegramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("HackathonBot.Models.Participant", b =>
                {
                    b.HasOne("MyBots.Core.Persistence.DTO.User", "FsmUser")
                        .WithMany()
                        .HasForeignKey("FsmUserId");

                    b.HasOne("HackathonBot.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBots.Core.Persistence.DTO.User", null)
                        .WithMany()
                        .HasForeignKey("TelegramId")
                        .HasPrincipalKey("TelegramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FsmUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HackathonBot.Models.Submission", b =>
                {
                    b.HasOne("HackathonBot.Models.Participant", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HackathonBot.Models.Team", "Team")
                        .WithOne("Submission")
                        .HasForeignKey("HackathonBot.Models.Submission", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmittedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HackathonBot.Models.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Submission");
                });
#pragma warning restore 612, 618
        }
    }
}
